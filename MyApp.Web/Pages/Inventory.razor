@page "/inventory"
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid
@using MyApp.Web.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime Js

<PageTitle>Inventory Management</PageTitle>

    <div class="page-header">
        <h2>Inventory</h2>

        <FluentButton Appearance="Appearance.Accent"
                      OnClick="ShowAddDialog"
                      IconStart="@( new Icons.Regular.Size16.Add() )">
            Add&nbsp;Item
        </FluentButton>
    </div>

    <FluentDataGrid Items="@_items.AsQueryable()"
                    Sortable
                    Filterable
                    ResizableColumns
                    AutoFit>

        <!-- wrap all your columns in the ChildContent fragment -->
        <ChildContent>
            <PropertyColumn Title="ID"
                            Width="50px"
                            Property="@( i => i.Id )" />

            <PropertyColumn Title="Name"
                            Property="@( i => i.Name )" />

            <PropertyColumn Title="Quantity"
                            Width="100px"
                            Property="@( i => i.Quantity )" />

            <TemplateColumn Title="Actions"
                            Width="150px"
                            Context="item">
                <AuthorizeView Roles="Admin,Manager">
                    <Authorized>
                        <FluentButton Appearance="Appearance.Stealth"
                                      Title="Edit"
                                      OnClick="@( () => ShowEditDialog(item) )"
                                      IconStart="@( new Icons.Regular.Size16.Edit() )" />

                        <FluentButton Appearance="Appearance.Stealth"
                                      Title="Delete"
                                      OnClick="@( () => ConfirmDelete(item.Id) )"
                                      IconStart="@( new Icons.Regular.Size16.Delete() )" />
                    </Authorized>
                </AuthorizeView>
            </TemplateColumn>
        </ChildContent>

        <!-- this renders only when _items is empty -->
        <EmptyContent>
            <div style="text-align:center; padding:1rem;">
                <p>No items found—try adding some!</p>
                <FluentButton Appearance="Appearance.Neutral"
                              OnClick="ShowAddDialog">
                    Add Item
                </FluentButton>
            </div>
        </EmptyContent>

    </FluentDataGrid>


    <FluentDialog @bind-Hidden="_isDialogHidden">
        <FluentDialogHeader>
            @(_editMode ? "Edit Item" : "Add New Item")
        </FluentDialogHeader>

        <FluentDialogBody>
            <FluentTextField Label="Name"
                             @bind-Value="_currentItem.Name"
                             Placeholder="Enter item name"/>

            <FluentTextField Label="Description"
                             @bind-Value="_currentItem.Description"
                             Placeholder="Enter item description"/>

            <FluentNumberField Label="Quantity"
                               Min="0"
                               @bind-Value="_currentItem.Quantity"/>

            <FluentNumberField Label="Price" @bind-Value="_currentItem.Price" TValue="decimal" Step="0.1" type="number" />

        </FluentDialogBody>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="CloseDialog">Cancel
            </FluentButton>

            <FluentButton Appearance="Appearance.Accent"
                          OnClick="SaveItem">
                @(_editMode ? "Update" : "Create")
            </FluentButton>
        </FluentDialogFooter>
    </FluentDialog>

@code {
    private List<ProductDto> _items = [ ];
    private ProductDto _currentItem = new();
    private bool _isDialogHidden = true;
    private bool _editMode;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7015/api/Product");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.SendAsync(request);
        var results = await response.Content.ReadFromJsonAsync<List<ProductDto>>();
        _items = results ?? [ ];
        StateHasChanged();
    }

    private void ShowAddDialog()
    {
        _currentItem = new();
        _editMode = false;
        _isDialogHidden = false;
    }

    private void ShowEditDialog( ProductDto item )
    {
        _currentItem = new() { Id = item.Id, Name = item.Name, Quantity = item.Quantity };
        _editMode = true;
        _isDialogHidden = false;
    }

    private void CloseDialog() => _isDialogHidden = true;

    private async Task SaveItem()
    {
        if ( _editMode )
        {
            var existing = _items.First(i => i.Id == _currentItem.Id);
            existing.Name = _currentItem.Name;
            existing.Quantity = _currentItem.Quantity;
        }
        else
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            var json = System.Text.Json.JsonSerializer.Serialize(new
            {
                name = _currentItem.Name,
                description = _currentItem.Description,
                price = _currentItem.Price,
                quantity = _currentItem.Quantity,
                categoryId = _currentItem.CategoryId
            });
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7015/api/Product")
            {
                Content = content
            };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);
            var created = await response.Content.ReadFromJsonAsync<ProductDto>();

            if ( created == null )
                throw new Exception("Failed to create item");

            _items.Add(created);
        }

        _isDialogHidden = true;
    }

    private async Task ConfirmDelete( Guid id )
    {
        if ( await Js.InvokeAsync<bool>("confirm", $"Delete item #{id}?") )
            _items.RemoveAll(i => i.Id == id);
    }

}
