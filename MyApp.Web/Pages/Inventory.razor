@page "/inventory"

@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid
@using MyApp.Web.DTOs.Inventory
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime Js

<PageTitle>Inventory Management</PageTitle>

<CascadingAuthenticationState>
    <div class="page-header">
        <h2>Inventory</h2>

        <AuthorizeView Roles="Admin,Manager">
            <Authorized>
                <FluentButton Appearance="Appearance.Accent"
                              OnClick="ShowAddDialog"
                              IconStart="@( new Icons.Regular.Size16.Add() )">
                    Add&nbsp;Item
                </FluentButton>
            </Authorized>
        </AuthorizeView>
    </div>

    <FluentDataGrid Items="@items.AsQueryable()" Sortable Filterable ResizableColumns AutoFit>
        <PropertyColumn Title="ID" Width="50px" Property="@( i => i.Id )"/>
        <PropertyColumn Title="Name" Property="@( i => i.Name )"/>
        <PropertyColumn Title="Quantity" Width="100px" Property="@( i => i.Quantity )"/>

        <TemplateColumn Title="Actions" Width="150px" Context="item">
            <AuthorizeView Roles="Admin,Manager">
                <Authorized>
                    <FluentButton Appearance="Appearance.Stealth"
                                  Title="Edit"
                                  OnClick="@( () => ShowEditDialog(item) )"
                                  IconStart="@( new Icons.Regular.Size16.Edit() )"/>

                    <FluentButton Appearance="Appearance.Stealth"
                                  Title="Delete"
                                  OnClick="@( () => ConfirmDelete(item.Id) )"
                                  IconStart="@( new Icons.Regular.Size16.Delete() )"/>
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentDialog @bind-IsOpen="isDialogOpen">
        <FluentDialogHeader>
            @(editMode ? "Edit Item" : "Add New Item")
        </FluentDialogHeader>

        <FluentDialogBody>
            <FluentTextField Label="Name"
                             @bind-Value="currentItem.Name"
                             Placeholder="Enter item name"/>

            <FluentNumberField Label="Quantity"
                               Min="0"
                               @bind-Value="currentItem.Quantity"/>
        </FluentDialogBody>

        <FluentDialogFooter>
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="CloseDialog">Cancel
            </FluentButton>

            <FluentButton Appearance="Appearance.Accent"
                          OnClick="SaveItem">
                @(editMode ? "Update" : "Create")
            </FluentButton>
        </FluentDialogFooter>
    </FluentDialog>
</CascadingAuthenticationState>

@code {
    private List<InventoryItemDto> items = [ ];
    private InventoryItemDto currentItem = new();
    private bool isDialogOpen;
    private bool editMode;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(200); // mock API latency
        items =
        [
            new() { Id = 1, Name = "AA Batteries (Pack of 4)", Quantity = 23 },
            new() { Id = 2, Name = "USB-C Cable", Quantity = 42 },
            new() { Id = 3, Name = "Wireless Mouse", Quantity = 15 },
        ];
    }

    private void ShowAddDialog()
    {
        currentItem = new();
        editMode = false;
        isDialogOpen = true;
    }

    private void ShowEditDialog( InventoryItemDto item )
    {
        currentItem = new() { Id = item.Id, Name = item.Name, Quantity = item.Quantity };
        editMode = true;
        isDialogOpen = true;
    }

    private void CloseDialog() => isDialogOpen = false;

    private void SaveItem()
    {
        if ( editMode )
        {
            var existing = items.First(i => i.Id == currentItem.Id);
            existing.Name = currentItem.Name;
            existing.Quantity = currentItem.Quantity;
        }
        else
        {
            currentItem.Id = items.Any() ? items.Max(i => i.Id) + 1 : 1;
            items.Add(currentItem);
        }

        isDialogOpen = false;
    }

    private async Task ConfirmDelete( int id )
    {
        if ( await Js.InvokeAsync<bool>("confirm", $"Delete item #{id}?") )
            items.RemoveAll(i => i.Id == id);
    }

}
