@inherits LayoutComponentBase
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject NavigationManager Nav


<FluentLayout>
    <FluentHeader>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" Width="100%">
            MyApp.Web

            @if (isLoggedIn)
            {
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="10">
                    <span style="align-self: center;">Hello, @username</span>
                    <FluentButton Appearance="Appearance.Accent" OnClick="Logout">
                        Logout
                    </FluentButton>
                </FluentStack>
            }

        </FluentStack>
    </FluentHeader>


    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        @if (isLoggedIn)
        {
            <NavMenu />
        }

        <FluentBodyContent Class="body-content">
            <ErrorBoundary>
                <ChildContent>
                    <div class="content">
                        @Body
                    </div>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>

@code
{
    private bool isLoggedIn;
    private string? username;


    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        isLoggedIn = !string.IsNullOrWhiteSpace(token);

        if (isLoggedIn)
        {
            username = await GetUsernameFromToken();
        }
    }


    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        Nav.NavigateTo("/login", forceLoad: true);
    }


    private async Task<string?> GetUsernameFromToken()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrWhiteSpace(token)) return null;

        var parts = token.Split('.');
        if (parts.Length != 3) return null;

        var payload = parts[1];
        var json = System.Text.Encoding.UTF8.GetString(ParseBase64WithoutPadding(payload));
        var claims = System.Text.Json.JsonDocument.Parse(json);

        if (claims.RootElement.TryGetProperty("unique_name", out var name))
        {
            return name.GetString();
        }

        if (claims.RootElement.TryGetProperty("username", out var uname)) // optional fallback
        {
            return uname.GetString();
        }

        return null;
    }

    private byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }



}
